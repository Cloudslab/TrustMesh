---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sawtooth-config
data:
  node-template: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: pbft-{NODE_NUM}
    spec:
      selector:
        matchLabels:
          name: pbft-{NODE_NUM}
      replicas: 1
      template:
        metadata:
          labels:
            name: pbft-{NODE_NUM}
        spec:
          nodeSelector:
            kubernetes.io/hostname: fogchain-node-{NODE_NUM_PLUS_ONE}
          volumes:
            - name: couchdb-data
              persistentVolumeClaim:
                claimName: couchdb{NODE_NUM}-data
          containers:
            - name: sawtooth-intkey-tp-python
              image: hyperledger/sawtooth-intkey-tp-python:chime
              command: ["intkey-tp-python", "-vv", "-C", "tcp://localhost:4004"]
            - name: peer-registry-tp
              image: murtazahr/peer-registry-tp:latest
              env:
                - name: MAX_UPDATES_PER_NODE
                  value: "100"
                - name: VALIDATOR_URL
                  value: "tcp://localhost:4004"
            - name: docker-image-tp
              image: murtazahr/docker-image-tp:latest
              env:
                - name: VALIDATOR_URL
                  value: "tcp://localhost:4004"
            - name: sawtooth-pbft-engine
              image: hyperledger/sawtooth-pbft-engine:chime
              command: ["pbft-engine", "-vv", "--connect", "tcp://localhost:5050"]
            - name: sawtooth-rest-api
              image: hyperledger/sawtooth-rest-api:chime
              ports:
                - name: api
                  containerPort: 8008
              command: ["sawtooth-rest-api", "-vv", "-C", "tcp://localhost:4004", "-B", "0.0.0.0:8008"]
              readinessProbe:
                httpGet:
                  path: /status
                  port: 8008
                initialDelaySeconds: 15
                periodSeconds: 10
            - name: sawtooth-settings-tp
              image: hyperledger/sawtooth-settings-tp:chime
              command: ["settings-tp", "-vv", "-C", "tcp://localhost:4004"]
            - name: sawtooth-shell
              image: hyperledger/sawtooth-shell:chime
              command: ["/bin/sh", "-c"]
              args: ["sawtooth keygen && tail -f /dev/null"]
            - name: sawtooth-validator
              image: hyperledger/sawtooth-validator:chime
              ports:
                - name: tp
                  containerPort: 4004
                - name: consensus
                  containerPort: 5050
                - name: validators
                  containerPort: 8800
              env:
                - name: pbft{NODE_NUM}priv
                  valueFrom:
                    configMapKeyRef:
                      name: keys-config
                      key: pbft{NODE_NUM}priv
                - name: pbft{NODE_NUM}pub
                  valueFrom:
                    configMapKeyRef:
                      name: keys-config
                      key: pbft{NODE_NUM}pub
              command:
                - /bin/bash
              args:
                - -c
                - |
                  if [ ! -e /etc/sawtooth/keys/validator.priv ]; then
                    echo $pbft{NODE_NUM}priv > /etc/sawtooth/keys/validator.priv
                    echo $pbft{NODE_NUM}pub > /etc/sawtooth/keys/validator.pub
                  fi &&
                  sawtooth keygen my_key &&
                  {GENESIS_COMMANDS}
                  sawtooth-validator -vv \
                    --endpoint tcp://sawtooth-{NODE_NUM}:8800 \
                    --bind component:tcp://eth0:4004 \
                    --bind consensus:tcp://eth0:5050 \
                    --bind network:tcp://eth0:8800 \
                    --scheduler parallel \
                    --peering static \
                    --maximum-peer-connectivity 10000 \
                    {PEERS}
            - name: couch-db-{NODE_NUM}
              image: couchdb:3
              env:
                - name: COUCHDB_USER
                  valueFrom:
                    secretKeyRef:
                      name: couchdb-secrets
                      key: COUCHDB_USER
                - name: COUCHDB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: couchdb-secrets
                      key: COUCHDB_PASSWORD
                - name: COUCHDB_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: couchdb-secrets
                      key: COUCHDB_SECRET
                - name: ERL_FLAGS
                  value: "-setcookie \"${ERLANG_COOKIE}\" -kernel inet_dist_listen_min 9100 -kernel inet_dist_listen_max 9200"
                - name: NODENAME
                  value: "couchdb-{NODE_NUM}.default.svc.cluster.local"
              ports:
                - containerPort: 5984
              volumeMounts:
                - name: couchdb-data
                  mountPath: /opt/couchdb/data

  service-template: |
    apiVersion: v1
    kind: Service
    metadata:
      name: sawtooth-{NODE_NUM}
    spec:
      type: ClusterIP
      selector:
        name: pbft-{NODE_NUM}
      ports:
        - name: "4004"
          protocol: TCP
          port: 4004
          targetPort: 4004
        - name: "5050"
          protocol: TCP
          port: 5050
          targetPort: 5050
        - name: "8008"
          protocol: TCP
          port: 8008
          targetPort: 8008
        - name: "8080"
          protocol: TCP
          port: 8080
          targetPort: 8080
        - name: "8800"
          protocol: TCP
          port: 8800
          targetPort: 8800
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: couchdb-{NODE_NUM}
    spec:
      clusterIP: None
      selector:
        name: pbft-{NODE_NUM}
      ports:
        - name: couchdb
          port: 5984
          targetPort: 5984

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keys-config
data:
  pbft0priv: 7b68dbf4ba1b07f9a83916e6cc1288bb3755107bf3faf6e8ab8723f5c8ed9aab
  pbft0pub: 03032fc04eed89fb600a6c7ae40be5d53d5ca448f39b8458d77cfdb20e07c096d3
  pbft1priv: 0a1941140dbc252404af1a6890a9b0e6968bf9c4f3687123308f0dfb50f30b34
  pbft1pub: 03a6bdb46e160ebbd765564ee22d8d3b3e2611f1658ebc08bf35b85d4af6f5e2aa
  pbft2priv: f60474081afcfb237665b493a287df0e39fc7a1ee1381dccb12ca3001a67dc67
  pbft2pub: 03af53fe503848e39d56f5757ae1d7a23673d6e99531705bcae4b0503d1e3ddff8
  pbft3priv: 8fa92273525a49562fe5f54a962cb070049c328189256349edffaa8f9f38a2f8
  pbft3pub: 02210ea4147b2eef9eaf4f2a3b07ca2dc4e1e88dacce60c4f5ec511340a9897fd2
  pbft4priv: 7dd3ff6b1c96c4e6fc55bcf9b8b65663edb38b56bf76488db76bc90111443935
  pbft4pub: 0214bf7aa37463e5657f88df60e303a3b3db322f1cf6b5443d214caa119402afd4

---
apiVersion: v1
kind: List
items:
  # CouchDB Volume Claims
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: couchdb0-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: couchdb1-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: couchdb2-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: couchdb3-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: couchdb4-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

  # Sawtooth and CouchDB deployments and services
  - $patch: replace
    $type: object
    $value:
      $patch: replace
      source:
        $ref: '#/data/node-template'
      params:
        NODE_NUM: "0"
        NODE_NUM_PLUS_ONE: "1"
        GENESIS_COMMANDS: |
          if [ ! -e config-genesis.batch ]; then
            sawset genesis -k /root/.sawtooth/keys/my_key.priv -o config-genesis.batch
          fi &&
          sleep 30 &&
          echo sawtooth.consensus.pbft.members=["\"$pbft0pub\",\"$pbft1pub\",\"$pbft2pub\",\"$pbft3pub\",\"$pbft4pub\""] &&
          if [ ! -e config.batch ]; then
            sawset proposal create \
              -k /root/.sawtooth/keys/my_key.priv \
              sawtooth.consensus.algorithm.name=pbft \
              sawtooth.consensus.algorithm.version=1.0 \
              sawtooth.consensus.pbft.members=["\"$pbft0pub\",\"$pbft1pub\",\"$pbft2pub\",\"$pbft3pub\",\"$pbft4pub\""] \
              sawtooth.publisher.max_batches_per_block=1200 \
              -o config.batch
          fi && \
          if [ ! -e /var/lib/sawtooth/genesis.batch ]; then
            sawadm genesis config-genesis.batch config.batch
          fi &&
        PEERS: ""
  - $patch: replace
    $type: object
    $value:
      $ref: '#/data/service-template'
      params:
        NODE_NUM: "0"
  - $patch: replace
    $type: object
    $value:
      $patch: replace
      source:
        $ref: '#/data/node-template'
      params:
        NODE_NUM: "1"
        NODE_NUM_PLUS_ONE: "2"
        GENESIS_COMMANDS: ""
        PEERS: "--peers tcp://sawtooth-0:8800"
  - $patch: replace
    $type: object
    $value:
      $ref: '#/data/service-template'
      params:
        NODE_NUM: "1"
  - $patch: replace
    $type: object
    $value:
      $patch: replace
      source:
        $ref: '#/data/node-template'
      params:
        NODE_NUM: "2"
        NODE_NUM_PLUS_ONE: "3"
        GENESIS_COMMANDS: ""
        PEERS: "--peers tcp://sawtooth-0:8800 --peers tcp://sawtooth-1:8800"
  - $patch: replace
    $type: object
    $value:
      $ref: '#/data/service-template'
      params:
        NODE_NUM: "2"
  - $patch: replace
    $type: object
    $value:
      $patch: replace
      source:
        $ref: '#/data/node-template'
      params:
        NODE_NUM: "3"
        NODE_NUM_PLUS_ONE: "4"
        GENESIS_COMMANDS: ""
        PEERS: "--peers tcp://sawtooth-0:8800 --peers tcp://sawtooth-1:8800 --peers tcp://sawtooth-2:8800"
  - $patch: replace
    $type: object
    $value:
      $ref: '#/data/service-template'
      params:
        NODE_NUM: "3"
  - $patch: replace
    $type: object
    $value:
      $patch: replace
      source:
        $ref: '#/data/node-template'
      params:
        NODE_NUM: "4"
        NODE_NUM_PLUS_ONE: "5"
        GENESIS_COMMANDS: ""
        PEERS: "--peers tcp://sawtooth-0:8800 --peers tcp://sawtooth-1:8800 --peers tcp://sawtooth-2:8800 --peers tcp://sawtooth-3:8800"
  - $patch: replace
    $type: object
    $value:
      $ref: '#/data/service-template'
      params:
        NODE_NUM: "4"

  # CouchDB Setup Job
  - apiVersion: batch/v1
    kind: Job
    metadata:
      name: couchdb-setup
    spec:
      template:
        metadata:
          name: couchdb-setup
        spec:
          restartPolicy: OnFailure
          containers:
            - name: couchdb-setup
              image: curlimages/curl:latest
              command:
                - /bin/sh
              args:
                - -c
                - |
                  DB_NAME="resource_registry"
                  echo "Starting CouchDB cluster setup"
                  for i in 0 1 2 3 4; do
                    until curl -s "http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@couchdb-${i}.default.svc.cluster.local:5984" > /dev/null; do
                      echo "Waiting for CouchDB on couchdb-${i} to be ready..."
                      sleep 5
                    done
                    echo "CouchDB on couchdb-${i} is ready"
                  done
                  echo "Adding nodes to the cluster"
                  for num in 1 2 3 4; do
                    curl -X POST -H 'Content-Type: application/json' "http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@couchdb-0.default.svc.cluster.local:5984/_cluster_setup" -d "{\"action\": \"enable_cluster\", \"bind_address\":\"0.0.0.0\", \"username\": \"${COUCHDB_USER}\", \"password\":\"${COUCHDB_PASSWORD}\", \"port\": 5984, \"node_count\": \"5\", \"remote_node\": \"couchdb-${num}.default.svc.cluster.local\", \"remote_current_user\": \"${COUCHDB_USER}\", \"remote_current_password\": \"${COUCHDB_PASSWORD}\" }"
                    curl -X POST -H 'Content-Type: application/json' "http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@couchdb-0.default.svc.cluster.local:5984/_cluster_setup" -d "{\"action\": \"add_node\", \"host\":\"couchdb-${num}.default.svc.cluster.local\", \"port\": 5984, \"username\": \"${COUCHDB_USER}\", \"password\":\"${COUCHDB_PASSWORD}\"}"
                  done
                  echo "Finishing cluster setup"
                  curl -X POST -H 'Content-Type: application/json' "http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@couchdb-0.default.svc.cluster.local:5984/_cluster_setup" -d "{\"action\": \"finish_cluster\"}"
                  echo "Creating ${DB_NAME} database on all nodes"
                  curl -X PUT "http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@couchdb-0.default.svc.cluster.local:5984/${DB_NAME}"
                  echo "CouchDB cluster setup completed"
              env:
                - name: DB_NAME
                  value: "resource_registry"
                - name: COUCHDB_USER
                  valueFrom:
                    secretKeyRef:
                      name: couchdb-secrets
                      key: COUCHDB_USER
                - name: COUCHDB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: couchdb-secrets
                      key: COUCHDB_PASSWORD

  # CouchDB Secrets
  - apiVersion: v1
    kind: Secret
    metadata:
      name: couchdb-secrets
    type: Opaque
    stringData:
      COUCHDB_USER: fogbus
      COUCHDB_PASSWORD: mwg478jR04vAonMu2QnFYF3sVyVKUujYrGrzVsrq3I
      COUCHDB_SECRET: LEv+K7x24ITqcAYp0R0e1GzBqiE98oSSarPD1sdeOyM=
      ERLANG_COOKIE: jT7egojgnPLzOncq9MQU/zqwqHm6ZiPUU7xJfFLA8MA=

  # Docker Registry Volume Claim
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: sawtooth-registry-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi

  # Docker Registry
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: sawtooth-registry
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: sawtooth-registry
      template:
        metadata:
          labels:
            app: sawtooth-registry
        spec:
          containers:
            - name: registry
              image: registry:2
              ports:
                - containerPort: 5000
              env:
                - name: REGISTRY_HTTP_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: http-secret
              volumeMounts:
                - name: registry-data
                  mountPath: /var/lib/registry
          volumes:
            - name: registry-data
              persistentVolumeClaim:
                claimName: sawtooth-registry-data

  # Docker Registry Service
  - apiVersion: v1
    kind: Service
    metadata:
      name: sawtooth-registry
    spec:
      selector:
        app: sawtooth-registry
      ports:
        - protocol: TCP
          port: 5000
          targetPort: 5000

  # Docker Registry Secret
  - apiVersion: v1
    kind: Secret
    metadata:
      name: registry-secret
    type: Opaque
    stringData:
      http-secret: Y74bs7QpaHmI1NKDGO8I3JdquvVxL+5K15NupwxhSbc=